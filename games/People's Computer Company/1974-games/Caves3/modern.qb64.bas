10 REM *** CAVES3 *** YOU MAKE A SET OF COMPLEX-LINKED CAVES
20 REM FOR A FRIEND TO FIND HIS WAY OUT OF
30 REM *** WRITTEN BY DAVE KAUFMAN - JUNE 1973 ***
40 REM *** COPYRIGHT, PEOPLE'S COMPUTER CO. ***
50 REM *** 1921 MENALTO AVE., MENLO PARK, CA.. 94025 ***
55 CLS: COLOR 15
60 PRINT "Welcome to the Caves!"
70 PRINT
80 COLOR 10: PRINT "Introduction (Y/N)";
90 INPUT Z$: COLOR 15
100 IF LEFT$(Z$, 1) <> "Y" AND LEFT$(Z$, 1) <> "y" THEN 270
110 PRINT: COLOR 14
120 PRINT "This game is like Caves1 and Caves2, except you can set up the caves any way"
130 PRINT "you like.  Different tunnels can lead to the same cavern, or your caverns can"
140 PRINT "form loops like #12-#13-#19-#12.  (Warning: Never tunnel back to cavern #1.)"
150 PRINT
170 PRINT "Each cavern has a number of tunnels leading to other caverns - 0 tunnels means"
180 PRINT "a dead end cavern.  Otherwise, you can have 1, 2, 3, 4, or 5 tunnels."
200 PRINT
210 PRINT "When you're finished, ask a friend to find their way out."
220 PRINT
230 PRINT "A good idea is to make a map as you go along, so you can see what your caves"
240 PRINT "look like."
250 PRINT
260 PRINT "Good luck!": COLOR 15
270 V1 = 0
280 GOSUB 7500
290 R = 1
300 IF R >= 50 THEN 690
310 PRINT
315 N1$ = STR$(N1): N1$ = RIGHT$(N1$, LEN(N1$) - 1)
320 PRINT "You're in cavern #"; N1$; "."
330 COLOR 10: PRINT "How many new tunnels";
340 INPUT X: COLOR 15
350 ON X + 1 GOTO 770, 380, 380, 380, 380, 380
360 COLOR 10: PRINT "How many (0, 1, 2, 3, 4, 5 ONLY)";
370 GOTO 340
380 PRINT "One at a time:"
390 D9 = 0
400 FOR I = 1 TO X
410 INPUT Y
420 IF Y = N1 THEN 710
430 V1 = 7
440 D1 = 9999
450 GOSUB 7500
460 IF D1 = 9999 THEN 490
470 IF D1 = Y THEN 710
480 GOTO 450
490 R = R + 1
500 D1 = Y
510 V1 = 1
520 GOSUB 7500
530 N2 = N1
540 V1 = 8
550 GOSUB 7500
560 D1 = N2
570 V1 = 1
580 GOSUB 7500
590 IF D9 <> 0 THEN 650
600 D1 = 9999
610 V1 = 7
620 GOSUB 7500
630 IF D1 <> N2 THEN 650
640 D9 = N1
650 V1 = 8
660 D1 = N2
670 GOSUB 7500
680 IF V2 > 0 THEN 710
690 PRINT "That's a lot of caverns!  In fact, that's my limit!"
700 GOTO 940
710 NEXT I
720 IF D9 = 0 THEN 770
730 D1 = D9
740 V1 = 6
750 GOSUB 7500
760 GOTO 310
770 IF N1 = 1 THEN 940
780 V1 = 4
790 GOSUB 7500
800 V1 = 7
810 GOSUB 7500
820 IF D1 = 9999 OR D1 = 1 THEN 770
830 N2 = N1
840 V1 = 8
850 GOSUB 7500
860 D1 = 9999
870 V1 = 7
880 GOSUB 7500
890 IF D1 = N2 THEN 310
900 D1 = N2
910 V1 = 8
920 GOSUB 7500
930 GOTO 800
940 PRINT
950 PRINT "The caves are complete except for one small thing - they need a room that leads"
960 PRINT "to the outside."
970 PRINT
980 COLOR 10: PRINT "Which room # will that one be";
990 INPUT D1: COLOR 15
1000 V1 = 8
1010 GOSUB 7500
1020 IF V2 > 0 THEN 1050
1030 PRINT "No fair;"; D1; "isn't a room number!"
1040 GOTO 970
1050 W = D1
1060 D1 = 1
1070 V1 = 8
1080 GOSUB 7500
1090 PRINT
1100 PRINT
1110 PRINT
1120 COLOR 10: PRINT "When you're ready, type any number"
1130 INPUT X: COLOR 15
1140 PRINT
1150 PRINT
1160 PRINT "Let's go!"
1170 X = 9999
1180 PRINT
1190 N1$ = STR$(N1): N1$ = RIGHT$(N1$, LEN(N1$) - 1): PRINT "You're in a cavern #"; N1$; "."
1200 IF W = 1 THEN 1450
1210 D1 = 9999
1220 V1 = 7
1230 GOSUB 7500
1240 IF D1 = 9999 THEN 1270
1250 D1$ = STR$(D1): D1$ = RIGHT$(D1$, LEN(D1$) - 1): PRINT "#"; D1$; " ";
1260 GOSUB 1230
1270 PRINT "are where you can go."
1280 COLOR 10: PRINT "Where next";
1290 INPUT D1: COLOR 15
1300 IF D1 = N1 THEN 1280
1310 V1 = 6
1320 GOSUB 7500
1330 IF V2 > 0 THEN 1360
1340 PRINT "Illegal move."
1350 GOTO 1280
1360 IF N1 = W THEN 1450
1370 D1 = 9999
1380 V1 = 7
1390 GOSUB 7500
1400 IF D1 <> 9999 THEN 1180
1410 PRINT "Dead end!"
1420 V1 = 4
1430 GOSUB 7500
1440 GOTO 1280
1450 PRINT
1460 PRINT
1470 PRINT TAB(10); "!!!   Sunlight   !!!"
1480 PRINT
1490 PRINT TAB(10); "!!!  Fresh  Air  !!!"
1500 PRINT
1510 PRINT TAB(10); "...  Reporters   ..."
1520 PRINT
1530 PRINT
1540 PRINT "Well, at least you're out!"
1550 PRINT
1560 COLOR 10: PRINT "This set of caves again (Y/N)";
1570 INPUT Z$: COLOR 15
1580 IF LEFT$(Z$, 1) = "Y" OR LEFT$(Z$, 1) = "y" THEN 1060
1590 COLOR 10: PRINT "Do you want to make another set of caves (Y/N)";
1600 INPUT Z$: COLOR 15
1610 IF LEFT$(Z$, 1) = "Y" OR LEFT$(Z$, 1) = "y" THEN 270
1620 STOP: 'CHAIN "CAVESM"
7400 REM *** TREE SUBROUTINES BEGIN ***
7402 REM SACRED NAMES: N(127),P(385),L(99),N9,P1,P2,P3,P4,P5,P9,
7404 REM               L1,FND,FNN,FNU
7406 REM ARGUMENT: V1,V2,N1,D1
7408 REM N1 IS NAME OF CURRENT NODE (FOR TOP NODE, N1=1)
7410 REM D1 IS NAME OF DAUGHTER NODE
7412 REM NODE NAMES CAN BE ANY NUMBER EXCEPT 9999
7414 REM
7416 REM V1=  0 INITIALIZE TREE; MAKE #1 THE CURRENT NODE
7418 REM      1 ADD D1 AS NEXT DAUGHTER TO CURRENT NODE
7420 REM      2 CUT D1 OFF FROM CURRENT NODE (BUT LEAVE IT AND
7422 REM        ALL BELOW IT)
7424 REM      3 PRUNE D1 (AND ALL BELOW IT) FROM TREE
7426 REM      4 GO UP FROM N1 TO MOTHER NODE (UNLESS AT TOP)
7428 REM      5 GO UP FROM N1 THE WAY YOU CAME (UNLESS AT TOP)
7430 REM      6 GO DOWN TO D1 FROM CURRENT NODE (IF LEGAL)
7432 REM      7 RETURN WITH NEXT DAUGHTER NODE (AFTER D1) IN D1
7434 REM        IF NO MORE, D1=9999
7436 REM        IF D1 ISN'T A DAUGHTER OF CURRENT NODE, RETURN WITH
7438 REM        FIRST DAUGHTER NODE
7440 REM      8 RESET CURRENT NODE TO D1, WHEREVER IT IS IN TREE
7442 REM
7444 REM V2=  2  INSTRUCTION CARRIED OUT, BUT D1 IS A NEW NODE NAME
7446 REM      1  INSTRUCTION CARRIED OUT
7448 REM     -1 CANNOT MOVE UP (OR DOWN) BECAUSE ON TOP (BOTTOM)
7450 REM     -2 MORE THAN 127 NODES
7452 REM     -3 TOO MANY CONNECTIONS
7454 REM     -4 D1 IS NOT A NODE NAME
7480 DIM SHARED N(127), P(385), L(99)
7482 ' DEF FNP(X) = INT(P(X) / 512)
7484 ' DEF FNN(X) = P(X) - INT(P(X) / 512) * 512
7500 REM ***ENTRY POINT FOR TREE SUBROUTINES
7505 V2 = 1
7510 ON V1 + 1 GOSUB 7525, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300
7515 N1 = N(P1)
7520 RETURN
7525 REM *** V1=0 ***
7526 REM *** INITIALIZE TREE
7530 N(1) = 1
7531 FOR P1 = 2 TO 127
7532 N(P1) = 9999
7533 NEXT P1
7535 N9 = 2
7540 FOR P1 = 2 TO 384
7545 P(P1) = P1 + 1
7550 NEXT P1
7551 P(1) = 0
7552 P(127) = 0
7553 P(385) = 0
7555 P1 = 1
7557 P2 = 1
7560 P9 = 128
7565 L1 = 1
7570 RETURN
7600 REM *** V1=1 ***
7601 REM *** ADD D1 AS THE NEXT DAUGHTER TO CURRENT NODE
7602 GOSUB 8400
7604 IF P2 > 0 THEN 7622
7606 IF N9 <> 0 THEN 7612
7608 V2 = -2
7610 RETURN
7612 V2 = 2
7614 N(N9) = D1
7618 P2 = N9
7620 N9 = P(N9)
7621 P(P2) = 0
7622 P3 = P1
7624 IF FNN(P3) = 0 THEN 7632
7626 P3 = FNN(P3)
7628 IF FNP(P3) = P2 THEN 7646
7630 GOTO 7624
7632 IF P9 <> 0 THEN 7638
7634 V2 = -3
7636 RETURN
7638 P(P3) = P(P3) + P9
7640 P3 = P9
7642 P9 = P(P9)
7644 P(P3) = P2 * 512
7646 IF FNP(P2) <> 0 THEN 7650
7648 P(P2) = P(P2) + P1 * 512
7650 RETURN
7700 REM *** V1=2 ***
7701 REM *** CUT D1 OFF FROM CURRENT NODE (BUT LEAVE IT  & ALL BELOW)
7702 GOSUB 8400
7704 IF V2 < 0 THEN 7740
7706 P3 = P1
7708 P4 = P3
7710 P3 = FNN(P3)
7712 IF FNP(P3) = P2 THEN 7718
7714 IF P3 = 100 THEN 7740
7716 GOTO 7708
7718 IF FNP(P2) <> P1 THEN 7734
7720 P(P2) = P(P2) - P1 * 512
7734 P(P4) = P(P4) + FNN(P3) - P3
7736 P(P3) = P9
7738 P9 = P3
7740 RETURN
7800 REM *** V1=3 ***
7801 REM *** PRUNE D1 AND ALL BELOW IT
7802 GOSUB 8400
7804 IF V2 < 0 THEN 7899
7806 REM * ADD TO FREE LISTS ALL N AND P ENTRIES IN SUBTREE
7808 IF FNN(P2) <> 0 THEN 7818
7810 N(P2) = 9999
7812 P(P2) = N9
7814 N9 = P2
7816 GOTO 7870
7818 P(P2) = FNN(P2)
7820 N(P2) = 9999
7822 P3 = FNN(P2)
7823 IF P3 = 0 THEN 7856
7824 P4 = FNP(P3)
7826 IF N(P4) = 9999 THEN 7844
7828 IF FNP(P4) = 0 THEN 7838
7830 REM DROP DOWN TO DAUGHTER
7832 P(P4) = P(P4) + (P2 - FNP(P4)) * 512
7834 P2 = P4
7836 GOTO 7820
7838 N(P4) = 9999
7840 P(P4) = N9
7842 N9 = P4
7844 REM MOVE TO NEXT DAUGHTER
7845 P4 = FNN(P3)
7846 IF P4 = 0 THEN 7851
7847 P(P3) = P(P4)
7848 P(P4) = P9
7849 P9 = P4
7850 GOTO 7824
7851 P(P3) = P9
7852 P9 = P3
7856 REM GO UP TO MOTHER NODE
7858 P3 = FNP(P2)
7860 P(P2) = N9
7862 N9 = P2
7864 P2 = P3
7866 IF P2 <> 0 THEN 7822
7870 REM * DELETE ALL REFERENCES TO PRUNED NODES
7872 FOR P2 = 1 TO 127
7874 IF N(P2) = 9999 THEN 7898
7876 REM LOOK AT ALL DAUGHTERS
7878 P3 = P2
7880 P4 = P3
7882 P3 = FNN(P3)
7884 IF P3 = 0 THEN 7898
7886 IF N(FNP(P3)) <> 9999 THEN 7880
7888 P(P4) = P(P4) + FNN(P3) - FNN(P4)
7890 P(P3) = P9
7892 P9 = P3
7894 P3 = FNN(P4)
7896 GOTO 7884
7898 NEXT P2
7899 RETURN
7900 REM *** V1=4 ***
7901 REM *** GO UP FROM N1 TO ITS MOTHER NODE (UNLESS AT TOP)
7905 IF FNP(P1) = 0 THEN 7935
7910 P2 = P1
7915 D1 = N1
7920 P1 = FNP(P1)
7925 L1 = L1 - 1: IF L1 < 1 THEN L1 = 1
7930 RETURN
7935 V2 = -1
7940 RETURN
8000 REM *** V1=5 ***
8001 REM *** GO UP THE WAY YOU CAME (UNLESS AT TOP)
8005 IF L1 > 1 THEN 8020
8010 V2 = -1
8015 RETURN
8020 L1 = L1 - 1
8021 IF N(L(L1)) = 9999 THEN 8010
8022 P2 = P1
8025 P1 = L(L1)
8027 D1 = N1
8030 RETURN
8100 REM *** V1=6 ***
8101 REM *** GO DOWN TO D1 FROM CURRENT NODE (IF LEGAL)
8115 GOSUB 8400
8120 IF V2 < 0 THEN 8150
8125 P3 = P1
8127 P3 = FNN(P3)
8130 IF P3 = 0 THEN 8145
8135 IF FNP(P3) = P2 THEN 8155
8140 GOTO 8127
8145 V2 = -1
8150 RETURN
8155 L(L1) = P1
8160 P1 = P2
8165 L1 = L1 + 1
8170 RETURN
8200 REM *** V1=7 ***
8201 REM *** RETURN WITH NEXT DAUGHTER NODE IN D1 (IF NO MORE, D1=9999)
8205 IF FNN(P1) = 0 THEN 8275
8210 GOSUB 8400
8220 P3 = P1
8225 P3 = FNN(P3)
8230 IF P3 = 0 THEN 8245
8235 IF FNP(P3) = P2 THEN 8250
8240 GOTO 8225
8245 P3 = P1
8250 P2 = FNN(P3)
8255 IF P2 = 0 THEN 8275
8257 P2 = FNP(P2)
8260 D1 = N(P2)
8265 RETURN
8275 D1 = 9999
8280 RETURN
8300 REM *** V1=8 ***
8301 REM **: RESET TO NODE D1
8310 GOSUB 8400
8320 IF V2 < 0 THEN 8350
8330 P1 = P2
8340 L1 = L1
8350 RETURN
8400 REM *** FIND POINTER FOR D1
8402 IF D1 = 9999 THEN 8440
8403 IF P2 < 1 OR P2 > 127 THEN 8406
8404 IF N(P2) = D1 THEN 8460
8406 IF D1 < 1 OR D1 > 127 THEN 8414
8408 IF N(D1) <> D1 THEN 8414
8410 P2 = D1
8412 RETURN
8414 FOR P2 = 1 TO 127
8420 IF N(P2) = D1 THEN 8460
8430 NEXT P2
8440 V2 = -4
8450 P2 = -1
8460 RETURN

FUNCTION FNP (X)
  FNP = INT(P(X) / 512)
END FUNCTION

FUNCTION FNN (X)
  FNN = P(X) - INT(P(X) / 512) * 512
END FUNCTION

