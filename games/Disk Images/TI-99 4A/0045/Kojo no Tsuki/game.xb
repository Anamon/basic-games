10 GOTO 100
11 D,J,C$,T,V,W,A,B,C,L,TT,Q,SET
30 CALL CLEAR :: CALL SCREEN :: CALL COLOR :: CALL VCHAR :: CALL CHAR :: CALL HCHAR :: CALL SOUND :: CALL PEEK :: CALL CHARSET2 :: CALL CHARSET
40 !@P-
100 CALL CLEAR :: CALL CHARSET
110 REM      KOJO NO TSUKI, an old Japanese melody, programmed by James W. Peterson, 156 Collingwood Ave., Columbus, Ohio 43213  2/83, rev. 8/83
120 REM  Released to public domain 8/85
130 CALL SCREEN(5) :: FOR SET=1 TO 12 :: CALL COLOR(SET,2,1) :: NEXT SET :: DISPLAY AT(5,8):"KOJO NO TSUKI": :"PD";TAB(10);"  Tigercub Software"
140 FOR D=1 TO 500
150 NEXT D :: CALL SCREEN(2) :: CALL CLEAR :: FOR J=1 TO 12 :: CALL COLOR(J,2,2)
160 NEXT J :: CALL VCHAR(1,31,1,96) :: CALL SCREEN(2) :: FOR J=33 TO 63 :: READ C$ :: CALL CHAR(J,C$)
170 NEXT J :: FOR J=88 TO 95 :: READ C$ :: CALL CHAR(J,C$)
180 NEXT J :: CALL CHAR(120,"FEFEFCFCF8F0C000")
189 !@P+
190 DATA 004442294A528991,00102010484A929C,00010F1F1F3F7FFF,FFFFFFFFFFFFFFFF,1830303018599A99,000000000038FFFF
191 !@P-
200 DATA 1F1F1F3F3F3F7FFF,01030F1F1F3F7FFF,804040300E116,0000000000C0380F,00000001021CF080,0808100CB8580C30
210 DATA F80810080810121D,0000023C40804080,0020201008080403,0000001020101010,F8F0FCE0F8C1F3FF,010303010767E7FF
220 DATA 0000000183FFFF7F,183C7EFFFFFFFFFF,00000080C1FFFFFE,FF0703070F070301,FFFFFCF8F,FFFFFF3F1F,817F3F070F3F7FF
230 DATA 81FEFCE0F0FCFEFF,010303070F1F7FFF,80C0C0E0F0F8FEFF,01011D3F21010101,8080B8FCC4808080,00
240 DATA 00030F1F3F3F7F7F,7EFFFFFFFFFFFFFF,00C0F0F8FCFCFEFE,7FFFFFFFFFFFFF7F,FFFFFFFFFFFFFFFF
250 DATA FEFFFFFFFFFFFFFE,7F7F3F3F1F0F0300,FFFFFFFFFFFFFF7E
260 PRINT TAB(7);"KOJO NO TSUKI": :")Moon over the castle ruins)": :
270 PRINT "                   XYZ":"                   [\]":"                   ^_x"
280 PRINT "                       =>":"                       ;<":"                      9$$:"
290 PRINT "                    9$$$$:":"                    9$$$ $$:":"                    7$$$ $$8"
300 PRINT "                     $$$$$$":"      345    345     6$$$$$$":"       $      $      2$$$$$$"
310 PRINT "      #$   /0 $$1#$$$$$$$$$$":"     ($$    -.$$$$$$$$$$$$$$":"    ($$$ )*+, $$$$$$$$$$$$$$" :: PRINT "   &'$$$    % $$$$$$$$$$$$$$":"!!#$$$$$!!!!%!$$$$$$$$$$$$$$"
320 CALL HCHAR(24,1,36,32) :: FOR J=1 TO 12 :: CALL COLOR(J,2,5)
330 NEXT J :: CALL COLOR(8,16,5) :: CALL COLOR(12,16,5)
340 T=600 :: RESTORE 360 :: FOR J=1 TO 102 STEP 2 :: READ V,W :: CALL SOUND(T*V,22000,30,22000,30,W,30,-4,5)
350 NEXT J
360 DATA 1,1236,1,1236,1,1650,1,1852,1,1962,1,1852,2,1650
370 DATA 1,1309,1,1309,1,1236,1,1101,3,1236
380 DATA 1,1236,1,1236,1,1650,1,1852,1,1962,1,1852,2,1650
390 DATA 1,1309,1,1101,1,1236,1,1236,4,825
400 DATA 1,981,1,981,1,926,1,825,1,1309,1,1309,2,1236
410 DATA 1,1101,1,1236,1,1309,1,1309,3,1236
420 DATA 1,1236,1,1236,1,1650,1,1852,1,1962,1,1852,2,1650
430 DATA 1,1309,1,1101,1,1236,1,1236,2,825,1,618,1,491,2,413,2,413
440 CALL SOUND(2400,22000,30) :: RESTORE 470 :: FOR J=1 TO 98 STEP 2 :: READ A,B,C :: FOR L=1 TO A/2 :: CALL SOUND(-999,B,C) :: CALL SOUND(-999,B*1.02,C)
450 NEXT L
460 NEXT J
470 DATA 10,659,0,10,659,4,10,880,0,10,988,0,10,1047,0,10,988,0,20,880,0
480 DATA 10,698,0,10,698,4,10,659,0,10,587,0,30,659,0
490 DATA 10,659,4,10,659,0,10,880,0,10,988,0,10,1047,0,10,988,0,20,880,0
500 DATA 10,698,0,10,587,0,10,659,0,10,659,4,40,440,0
510 DATA 10,523,0,10,523,4,10,494,0,10,440,0,10,698,0,10,698,4,20,659,0
520 DATA 10,587,0,10,659,0,10,698,0,10,698,4,30,659,0
530 DATA 10,659,4,10,659,0,10,880,0,10,988,0,10,1047,0,10,988,0,20,880,0
540 DATA 10,698,0,10,587,0,10,659,0,10,659,4,40,440,0
550 DATA 80,22000,30
560 GOSUB 570 :: GOTO 610
570 CALL SOUND(600,330,5,262,7,1650,30,-4,13) :: CALL SOUND(600,330,5,262,7,825,30,-4,13)
580 CALL SOUND(600,440,5,262,7,1650,30,-4,13) :: CALL SOUND(600,494,5,392,7,1236,30,-4,13)
590 CALL SOUND(600,523,5,330,7,981,30,-4,13) :: CALL SOUND(600,494,5,392,7,1236,30,-4,13)
600 CALL SOUND(1200,440,5,262,7,1650,30,-4,13) :: RETURN
610 CALL SOUND(600,349,5,220,7,1101,30,-4,13) :: CALL SOUND(600,349,5,220,7,1101,30,-4,13)
620 CALL SOUND(600,330,5,262,7,1650,30,-4,13) :: CALL SOUND(600,294,5,220,7,1101,30,-4,13)
630 CALL SOUND(1800,330,5,220,7,825,30,-4,13) :: GOSUB 640 :: GOTO 670
640 GOSUB 570 :: CALL SOUND(600,349,5,220,7,1101,30,-4,13) :: CALL SOUND(600,294,5,220,7,1101,30,-4,13)
650 CALL SOUND(600,330,5,220,7,825,30,-4,13) :: CALL SOUND(600,330,5,220,7,825,30,-4,13)
660 CALL SOUND(2400,220,5,165,7,825,30,-4,13) :: RETURN
670 CALL SOUND(600,262,5,196,7,981,30,-4,13) :: CALL SOUND(600,262,5,196,7,981,30,-4,13)
680 CALL SOUND(600,247,5,196,7,1236,30,-4,13) :: CALL SOUND(600,220,5,131,7,981,30,-4,13)
690 CALL SOUND(600,349,5,220,7,1101,30,-4,13) :: CALL SOUND(600,349,5,220,7,1101,30,-4,13)
700 CALL SOUND(1200,330,5,262,7,1650,30,-4,13) :: CALL SOUND(600,294,5,175,7,1101,30,-4,13)
710 CALL SOUND(600,330,5,196,7,1101,30,-4,13) :: CALL SOUND(600,349,5,220,7,1101,30,-4,13)
720 CALL SOUND(600,349,5,220,7,1101,30,-4,13) :: CALL SOUND(1800,330,5,294,7,1650,30,-4,13) :: GOSUB 640 :: FOR J=8 TO 30 STEP .8
730 CALL SOUND(-99,220,J,165,J,825,30,-4,J)
740 NEXT J :: FOR D=1 TO 1200
750 NEXT D :: FOR D=1 TO 2 :: RESTORE 470 :: FOR J=1 TO 98 STEP 2 :: READ A,B,C :: B=B/D :: FOR V=1 TO 15 STEP 2 :: CALL SOUND(-999,B,V) :: CALL SOUND(-999,B*1.03,V)
760 NEXT V
770 IF A=10 THEN 810
780 FOR T=1 TO A/10-1 :: FOR TT=1 TO 15 STEP 2 :: CALL SOUND(-999,B,V) :: CALL SOUND(-999,B*1.03,V)
790 NEXT TT
800 NEXT T
810 NEXT J
820 NEXT D :: GOTO 15000
15000 CALL PEEK(12288,Q) :: IF Q=1 THEN 15010 ELSE IF Q=2 THEN RUN "DSK1.QUICKLOAD" ELSE IF Q=3 THEN 340 ELSE CALL CLEAR :: STOP
15010 CALL CLEAR :: CALL CHARSET2 :: RUN "DSK1.NELLIE"
20601 !@P+
20602 SUB CHARSET2
20603 DATA 38447C4444,7824382478,3C4040403C,7824242478,7C4078407C,7C40784040,3C405C4438,44447C4444,3810101038
20604 DATA 0808084830,2428302824,404040407C,446C544444,4464544C44,7C4444447C,7844784040,3844544834,7844784844,3C40380478
20605 DATA 7C10101010,4444444438,4444282810,4444545428,4428102844,4428101010,7C0810207C,123,0018202040202018,124,001010100010101
20606 DATA 125,003008080408083,126,0000205408,96,0000201008
20607 RESTORE 20603 :: FOR CH=97 TO 122 :: READ CH$ :: CALL CHAR(CH,"000000"&CH$) :: NEXT CH :: FOR CH=1 TO 10 STEP 2 :: READ CH,CH$ :: CALL CHAR(CH,CH$) :: NEXT CH
20608 SUBEND
