STATES & CAPITALS TUTOR

  by Enoch L. Moser

"States & Capitals Tutor," in addition to being a useful tool for
students who are learning the American states and capitals, also
demonstrates the use of arrays in programs and the storage and
retrieval of data on cassette.  Both of these concepts are important
to programmers, but nonprogrammers may use States & Capitals Tutor
without delving into the working details.

"States & Capitals Tutor" asks a student the name of either a state or
a capital, and keeps track of correct and incorrect responses.  The
program randomly decides whether to quiz the student on either states
or capitals and also chooses the questions randomly.

Questions answered correctly are not repeated.  However, the program
will repeat questions that are missed.  And like any good teacher,
States & Capitals Tutor will help students who ask for it.  Students
who are stumped can simply type HELP.  The program gives the correct
answer and comes back to the troublesome question later.  It also
keeps track of how many times the student asks for help.

When all 50 states have been correctly matched with their capitals,
and if the student has not asked for help or missed any questions, he
or she is rewarded with a perfect score message.

A Two-Part Program 

The program reads the states and capitals from a disk or tape file
which is generated by Program 2, "File Maker."

To use these programs, follow this procedure:

  1. Type in Program 1.  Line 5 for tape users should be

         5 OPEN 1,1,0,"STATES"

     Line 5 for disk users should be

         5 OPEN 1,8,0,"STATES"

  2. SAVE Program 1 to disk or tape.  Tape users should leave the tape
     at its position after the SAVE.

  3. Type in Program 2 (File Maker).  Line 40 for tape users should be

         40 OPEN 1,1,1,"STATES"

     Line 40 for disk users should be

         40 OPEN 1,8,1,"STATES"

  4. RUN the program.  The states and capitals will be on the tape or
     disk under the filename STATES.  (Tape users should leave the
     tape in its position.)

  5. SAVE Program 2.

  6. Rewind the tape.

  7. LOAD Program 1; leave the PLAY button pressed and the tape in
     position when loading is complete.

  8. RUN Program 1.

How the Programs Work 

As mentioned, the File Maker program stores the states and capitals on
tape or disk under the filename STATES.  The main program, States &
Capitals Tutor, reads this file and stores the data in ST$(I, J), a
*two-dimensional array* (more on this in a moment).  When a right
answer is given, the range of the random number generator (line 100)
is decreased by one (line 205), and that state/capital is moved to the
top part of the list (lines 180-200), out of the range of selection.
Otherwise, the program is fairly straightforward.

The definitions of the variables are:

    ST$(49,1)  States and capitals array.
    K          Number of elements moved to top of list.
    R1%        State pointer.
    R2%        State or capital selector.
    AN$        Answer.
    RT%        Number right.
    WR%        Number wrong.
    HE%        Number of helps.
    I$         Temporary string for exchanging data.

Arrays

An *array* is simply an ordered set of data.  It may have one or more
*dimensions*.  A one-dimensional array is merely a list whose data
elements are numbered starting with 0.  For example, a grocery list of
20 items, numbered to 19, would be a one-dimensional array with 20
data elements.

To define an array, you must use a special type of variable called a
*subscripted variable*.  This takes the form AN(I), where AN is the
Array Name and I is the number (subscript) of the desired element.  In
our grocery list example, if I=19, then AN(I) would be the last item
on the list.

The array name may be any legal variable name, with $ (string
variable) or % (integer variable) appended if appropriate.  (This
would indicate that the data contained in the array are strings or
integers.)

Let's say you want a one-dimensional array with four elements.  The
four elements are integers (whole numbers): 21, 23, 25, and 27.  The
array would be represented by AN%(I).  That is to say, AN%(0)=21,
AN%(1)=23, AN%(2)=25, and AN%(3)=27.

A two-dimensional array is also an ordered list, but one whose
elements are each an ordered list themselves.  It's easier to
understand if you picture it as a chart.  For example, a
two-dimensional array might look like this:

         I=0  I=1  I=2  I=3 
    J=0   21   23   25   27
    J=1   43   45   47   49
    J=2   51   53   58   59

A proper name for this array could be AN% and its elements identified
as AN%(I,J).  If I=0 and J=0, then AN%(I,J)=21.  If I=3 and J=2, then
AN%(I,J)=59.  The advantage of arrays is that they let you store lots
of numbers or other data without using lots of variables, and you can
access any data element with a simple mathematical calculation.  But
be careful: arrays also consume big chunks of memory.

Arrays can become very complicated.  It's easy to picture one- and
two-dimensional arrays, but how about arrays of three or even four
dimensions?  Elements of three-and four-dimensional arrays are
identified in the form AN%(I,J,K) and AN%(I,J,K,L), respectively.

Creating Arrays

Typically, arrays are created with nested FOR/NEXT loops, each
containing a READ from a DATA statement or an INPUT from a storage
device.  Each FOR/NEXT level creates one ordered list.  For example,
the following program could be used to define the contents of the
two-dimensional array shown above:

    10 DIM AN%(3,2)
    20 FOR I=0 TO 3
    30 FOR J=0 TO 2
    40 READ AN%(I,J)
    50 NEXT J
    60 NEXT I
    70 DATA 21,43,51,23,45,53,25,47,58,27,49,59

The inner (or nested) FOR/NEXT loop (lines 30-50) creates the ordered
list of elements in the J-dimension within each element of the
I-dimension.  Compare the above chart to the DATA statement in line 70
to see how the array is set up.

The DIMension statement (line 10) is required to tell the computer how
much memory to set aside for the array.  Note that dimension sizes in
a DIMension statement are one less than the number of elements in the
dimension.  The numbers of dimensions and the number of elements in
each dimension are limited only by the amount of memory available.

Remember that an array can hold other types of data besides numbers.
States & Capitals Tutor uses a two-dimensional string array, ST$(I,J),
to store the 50 states and 50 capitals.  See lines 10-35 in Program 2.

Storing Data 

Data can be added to a program by using DATA statements or keyboard
inputs, or from data files stored on tape or disk.  Tape or disk files
work best when several programs must have access to the same data, or
when a program needs several different data files, or when the amount
of data you need to store exceeds memory capacity.  Note that when
arrays are filled from DATA statements, twice as much memory is
required as when they are filled from tape or disk.

Storing and retrieving data is quite simple if you adhere to a few
rules.  First, before information can be written to or read from a
file, a communications channel between the computer and recorder must
be opened with the OPEN command.  This tells the computer which file
is involved and in which direction the information will flow (input
from the recorder into the computer, or output from the computer to
the recorder).  If a write is indicated in the OPEN command, the
computer will write a filename.  If a read is indicated, the computer
will search for the requested filename and then read the file.

Second, the file must be closed, after use, by the CLOSE command.
This is especially important when creating a new file.

The third rule to watch when storing information on tape or disk is
that variable types must be consistent.  That is to say, data stored
as numeric, integer, or string variables must be read back into
variables of the same type.  The variable names themselves are not
stored, so they can be read back into entirely different variables, as
long as you don't mismatch types.

Fourth, data is read back in the same order in which it was written.
Therefore, the program must expect the data in exactly the same order
in which it will be received.
